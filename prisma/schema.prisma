// * after create schemas, run `npx prisma migrate dev --name init`;
// * above code runs `npx prisma generate` under the hood by default;
// ! .env file should belong to root directory
// * When the command does not work, check the privious migration file and directry change;

// * commend for updating schema: npx prisma db push


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model User {
  id          Int @id @default(sequence())
  firstName   String @db.String(25)
  lastName    String @db.String(25)
  email       String @unique
  password    String @db.String(60)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?

  // relations
  followeeId  Follow[] @relation("followeeId")
  followingId   Follow[] @relation("followingId")
  postAuthorId  Post[] @relation("postAuthorId")
  commentAuthorId   Comment[] @relation("commentAuthorId")
  UserActivityId UserActivity[] @relation("UserActivityId")
}

model Follow {
  id Int @id @default(sequence())
  followeeId Int
  followingId Int
  status Boolean
  createdAt DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?

  // relations
  followee User @relation("followeeId", fields: [followeeId], references: [id])
  following User @relation("followingId", fields: [followingId], references: [id])
}

model Post {
  id Int @id @default(sequence())
  postId Comment[]
  authorId Int
  imgUrl String?
  like Int @default(0)
  text String?
  createdAt DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?

  // relations
  author User @relation("postAuthorId", fields: [authorId], references: [id])
}

model Comment {
  id Int @id @default(sequence())
  authorId Int
  postId Int
  text String
  createdAt DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?

  // relations
  author User @relation("commentAuthorId", fields: [authorId], references: [id])
  post Post @relation(fields: [postId], references: [id])
}

model UserActivity {
  id Int @id @default(sequence())
  authorId Int
  activityId Int
  startedAt String
  finishedAt String
  duration Int
  createdAt DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?

  // relations
  author User @relation("UserActivityId", fields: [authorId], references: [id])
  activity Activity @relation(fields: [activityId], references: [id])
}

model Activity {
  id Int @id @default(sequence())
  activityId UserActivity[]
  name String
  createdAt DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?
}